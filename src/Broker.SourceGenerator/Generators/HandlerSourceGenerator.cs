namespace Broker.SourceGenerator.Generators;

[Generator]
public sealed class HandlerSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterSourceOutput(
            context.CompilationProvider, (productionContext, compilation) =>
            {
                var registrationLines = new StringBuilder();

                foreach (var syntaxTree in compilation.SyntaxTrees)
                {
                    registrationLines.Append(ProcessSyntaxTree(syntaxTree, compilation));
                }

                registrationLines.AppendLine("services.AddScoped<ISender, Sender>();");

                GenerateServiceCollectionExtension(productionContext, registrationLines.ToString());
            }
        );
    }

    private string ProcessSyntaxTree(SyntaxTree syntaxTree, Compilation compilation)
    {
        var registrationLines = new StringBuilder();
        var semanticModel = compilation.GetSemanticModel(syntaxTree);
        foreach (var classDeclaration in syntaxTree.GetClassDeclarationSyntax())
        {
            if (semanticModel.GetDeclaredSymbol(classDeclaration) is not INamedTypeSymbol symbol)
                continue;

            foreach (var @interface in symbol.Interfaces)
            {
                if (@interface.Name == "IHandler")
                {
                    var handlerType = symbol.ToString();
                    registrationLines.AppendLine($"services.AddScoped(typeof({@interface}), typeof({handlerType}));");
                }
                else if (@interface.Name.StartsWith("IRequestPreProcessor"))
                {
                    var preProcessorType = symbol.ToString();
                    registrationLines.AppendLine($"services.AddScoped(typeof({@interface}), typeof({preProcessorType}));");
                }
                else if (@interface.Name.StartsWith("IRequestPostProcessor"))
                {
                    var postProcessorType = symbol.ToString();
                    registrationLines.AppendLine($"services.AddScoped(typeof({@interface}), typeof({postProcessorType}));");
                }
            }
        }

        return registrationLines.ToString();
    }

    private void GenerateServiceCollectionExtension(
        SourceProductionContext context,
        string registrations
    )
    {
        var handlerServiceCollectionExtensionsSource =
            $$"""
              // <auto-generated />
              using Microsoft.Extensions.DependencyInjection;
              using Broker.Abstractions;

              namespace Broker.SourceGenerator;

              public static class HandlerServiceCollectionExtensions
              {
                 public static void AddHandlers(this IServiceCollection services)
                 {
                    {{registrations}}
                 }
              }
              """;

        context.AddSource(
            "HandlerServiceCollectionExtensions.g.cs",
            handlerServiceCollectionExtensionsSource
        );
    }
}